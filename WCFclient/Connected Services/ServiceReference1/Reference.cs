//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFclient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TryAccess", ReplyAction="http://tempuri.org/IService1/TryAccessResponse")]
        byte TryAccess(TFGService.Access value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TryAccess", ReplyAction="http://tempuri.org/IService1/TryAccessResponse")]
        System.Threading.Tasks.Task<byte> TryAccessAsync(TFGService.Access value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Result", ReplyAction="http://tempuri.org/IService1/ResultResponse")]
        string Result(byte x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Result", ReplyAction="http://tempuri.org/IService1/ResultResponse")]
        System.Threading.Tasks.Task<string> ResultAsync(byte x);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/prueba", ReplyAction="http://tempuri.org/IService1/pruebaResponse")]
        string prueba(TFGService.Access access);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/prueba", ReplyAction="http://tempuri.org/IService1/pruebaResponse")]
        System.Threading.Tasks.Task<string> pruebaAsync(TFGService.Access access);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WCFclient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WCFclient.ServiceReference1.IService1>, WCFclient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public byte TryAccess(TFGService.Access value) {
            return base.Channel.TryAccess(value);
        }
        
        public System.Threading.Tasks.Task<byte> TryAccessAsync(TFGService.Access value) {
            return base.Channel.TryAccessAsync(value);
        }
        
        public string Result(byte x) {
            return base.Channel.Result(x);
        }
        
        public System.Threading.Tasks.Task<string> ResultAsync(byte x) {
            return base.Channel.ResultAsync(x);
        }
        
        public string prueba(TFGService.Access access) {
            return base.Channel.prueba(access);
        }
        
        public System.Threading.Tasks.Task<string> pruebaAsync(TFGService.Access access) {
            return base.Channel.pruebaAsync(access);
        }
    }
}
